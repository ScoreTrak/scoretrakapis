syntax = "proto3";
package pkg.proto.competition.v1;

import "pkg/proto/config/v1/config.proto";
import "pkg/proto/report/v1/report.proto";
import "pkg/proto/host_group/v1/host_group.proto";
import "pkg/proto/host/v1/host.proto";
import "pkg/proto/team/v1/team.proto";
import "pkg/proto/service/v1/service.proto";
import "pkg/proto/service_group/v1/service_group.proto";
import "pkg/proto/round/v1/round.proto";
import "pkg/proto/property/v1/property.proto";
import "pkg/proto/check/v1/check.proto";
import "pkg/proto/user/v1/user.proto";
import "pkg/proto/policy/v1/policy.proto";

option go_package = "github.com/ScoreTrak/pkg/proto/competition/v1";

message Competition {
  pkg.proto.config.v1.DynamicConfig dynamic_config = 1;
  pkg.proto.report.v1.Report report = 2;
  repeated  pkg.proto.host_group.v1.HostGroup host_groups = 3;
  repeated  pkg.proto.host.v1.Host hosts = 4;
  repeated  pkg.proto.team.v1.Team teams = 5;
  repeated  pkg.proto.service.v1.Service services = 6;
  repeated  pkg.proto.service_group.v1.ServiceGroup service_groups = 7;
  repeated  pkg.proto.round.v1.Round rounds = 8;
  repeated  pkg.proto.property.v1.Property properties = 9;
  repeated  pkg.proto.check.v1.Check checks = 10;
  repeated  pkg.proto.user.v1.User users = 11;
  pkg.proto.policy.v1.Policy policy = 12;
}

message LoadCompetitionRequest{
  Competition competition = 1;
}
message LoadCompetitionResponse{}

message FetchCoreCompetitionRequest{}

message FetchCoreCompetitionResponse{
  Competition competition = 1;
}

message FetchEntireCompetitionRequest{}

message FetchEntireCompetitionResponse{
  Competition competition = 1;
}

message ResetScoresRequest{}
message ResetScoresResponse{}

message DeleteCompetitionRequest{}
message DeleteCompetitionResponse{}

service CompetitionService{
  rpc LoadCompetition(LoadCompetitionRequest) returns (LoadCompetitionResponse){}
  rpc FetchCoreCompetition(FetchCoreCompetitionRequest) returns (FetchCoreCompetitionResponse){}
  rpc FetchEntireCompetition(FetchEntireCompetitionRequest) returns (FetchEntireCompetitionResponse){}
  rpc ResetScores(ResetScoresRequest) returns (ResetScoresResponse) {}
  rpc DeleteCompetition(DeleteCompetitionRequest) returns (DeleteCompetitionResponse) {}
}
