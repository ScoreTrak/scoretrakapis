syntax = "proto3";

package scoretrak.competition.v2;

import "scoretrak/check/v1/check.proto";
import "scoretrak/config/v1/config.proto";
import "scoretrak/host/v1/host.proto";
import "scoretrak/host_group/v1/host_group.proto";
import "scoretrak/policy/v1/policy.proto";
import "scoretrak/property/v1/property.proto";
import "scoretrak/report/v1/report.proto";
import "scoretrak/round/v1/round.proto";
import "scoretrak/service/v1/service.proto";
import "scoretrak/service_group/v1/service_group.proto";
import "scoretrak/team/v1/team.proto";
import "scoretrak/user/v1/user.proto";

message Competition {
  scoretrak.config.v1.DynamicConfig dynamic_config = 1;
  scoretrak.report.v1.Report report = 2;
  repeated scoretrak.host_group.v1.HostGroup host_groups = 3;
  repeated scoretrak.host.v1.Host hosts = 4;
  repeated scoretrak.team.v1.Team teams = 5;
  repeated scoretrak.service.v1.Service services = 6;
  repeated scoretrak.service_group.v1.ServiceGroup service_groups = 7;
  repeated scoretrak.round.v1.Round rounds = 8;
  repeated scoretrak.property.v1.Property properties = 9;
  repeated scoretrak.check.v1.Check checks = 10;
  repeated scoretrak.user.v1.User users = 11;
  scoretrak.policy.v1.Policy policy = 12;
}

message CompetitionServiceLoadCompetitionRequest {
  Competition competition = 1;
}
message CompetitionServiceLoadCompetitionResponse {}

message CompetitionServiceFetchCoreCompetitionRequest {}

message CompetitionServiceFetchCoreCompetitionResponse {
  Competition competition = 1;
}

message CompetitionServiceFetchEntireCompetitionRequest {}

message CompetitionServiceFetchEntireCompetitionResponse {
  Competition competition = 1;
}

message CompetitionServiceResetScoresRequest {}
message CompetitionServiceResetScoresResponse {}

message CompetitionServiceDeleteCompetitionRequest {}
message CompetitionServiceDeleteCompetitionResponse {}

service CompetitionService {
  rpc LoadCompetition(CompetitionServiceLoadCompetitionRequest) returns (CompetitionServiceLoadCompetitionResponse) {}
  rpc FetchCoreCompetition(CompetitionServiceFetchCoreCompetitionRequest) returns (CompetitionServiceFetchCoreCompetitionResponse) {}
  rpc FetchEntireCompetition(CompetitionServiceFetchEntireCompetitionRequest) returns (CompetitionServiceFetchEntireCompetitionResponse) {}
  rpc ResetScores(CompetitionServiceResetScoresRequest) returns (CompetitionServiceResetScoresResponse) {}
  rpc DeleteCompetition(CompetitionServiceDeleteCompetitionRequest) returns (CompetitionServiceDeleteCompetitionResponse) {}
}
