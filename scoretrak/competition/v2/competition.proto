syntax = "proto3";

package scoretrak.competition.v2;

import "scoretrak/check/v2/check.proto";
import "scoretrak/config/v2/config.proto";
import "scoretrak/host/v2/host.proto";
import "scoretrak/host_group/v2/host_group.proto";
import "scoretrak/policy/v2/policy.proto";
import "scoretrak/property/v2/property.proto";
import "scoretrak/report/v2/report.proto";
import "scoretrak/round/v2/round.proto";
import "scoretrak/service/v2/service.proto";
import "scoretrak/service_group/v2/service_group.proto";
import "scoretrak/team/v2/team.proto";
import "scoretrak/user/v2/user.proto";

message Competition {
  scoretrak.config.v2.DynamicConfig dynamic_config = 1;
  scoretrak.report.v2.Report report = 2;
  repeated scoretrak.host_group.v2.HostGroup host_groups = 3;
  repeated scoretrak.host.v2.Host hosts = 4;
  repeated scoretrak.team.v2.Team teams = 5;
  repeated scoretrak.service.v2.Service services = 6;
  repeated scoretrak.service_group.v2.ServiceGroup service_groups = 7;
  repeated scoretrak.round.v2.Round rounds = 8;
  repeated scoretrak.property.v2.Property properties = 9;
  repeated scoretrak.check.v2.Check checks = 10;
  repeated scoretrak.user.v2.User users = 11;
  scoretrak.policy.v2.Policy policy = 12;
}

message CompetitionServiceLoadCompetitionRequest {
  Competition competition = 1;
}
message CompetitionServiceLoadCompetitionResponse {}

message CompetitionServiceFetchCoreCompetitionRequest {}

message CompetitionServiceFetchCoreCompetitionResponse {
  Competition competition = 1;
}

message CompetitionServiceFetchEntireCompetitionRequest {}

message CompetitionServiceFetchEntireCompetitionResponse {
  Competition competition = 1;
}

message CompetitionServiceResetScoresRequest {}
message CompetitionServiceResetScoresResponse {}

message CompetitionServiceDeleteCompetitionRequest {}
message CompetitionServiceDeleteCompetitionResponse {}

service CompetitionService {
  rpc LoadCompetition(CompetitionServiceLoadCompetitionRequest) returns (CompetitionServiceLoadCompetitionResponse) {}
  rpc FetchCoreCompetition(CompetitionServiceFetchCoreCompetitionRequest) returns (CompetitionServiceFetchCoreCompetitionResponse) {}
  rpc FetchEntireCompetition(CompetitionServiceFetchEntireCompetitionRequest) returns (CompetitionServiceFetchEntireCompetitionResponse) {}
  rpc ResetScores(CompetitionServiceResetScoresRequest) returns (CompetitionServiceResetScoresResponse) {}
  rpc DeleteCompetition(CompetitionServiceDeleteCompetitionRequest) returns (CompetitionServiceDeleteCompetitionResponse) {}
}
